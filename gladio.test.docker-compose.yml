services:
  mockingbird-icd-api:
    image: whoicd/icd-api
    environment:
      - acceptLicense=true
    healthcheck:
      test: "apk add curl; curl -X GET \"http://127.0.0.1:80/icd/entity/search?q=aids&flatResults=true\" -H  \"accept: application/json\" -H  \"API-Version: v2\" -H  \"Accept-Language: en\""
      interval: 5s
      timeout: 5s
      retries: 5
  mockingbird-postgres:
    environment:
      POSTGRES_DB: mediq
      POSTGRES_USER: mediq
      POSTGRES_PASSWORD: mediq
    image: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U mediq -d mediq" ]
      interval: 10s
      timeout: 5s
      retries: 5
  mockingbird:
    environment:
      - WHO_ICD_API=http://icd-api:80/icd
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_URL=jdbc:postgresql://mockingbird-postgres:5432/mediq
      - SPRING_DATASOURCE_USERNAME=mediq
      - SPRING_DATASOURCE_PASSWORD=mediq
    build:
      context: .
      dockerfile: mockingbird.Dockerfile
    depends_on:
      mockingbird-postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl 127.0.0.1:8080/sdl" ]
      interval: 10s
      timeout: 5s
      retries: 100
  gladio:
    environment:
      - MOCKINGBIRD_URL=http://mockingbird:8080
      - CONDOR_URL=http://condor:8081
    ports:
      - 4000:4000
    build:
      context: .
      dockerfile: gladio.Dockerfile
    command: [ "npm", "test" ]
    depends_on:
      mockingbird:
        condition: service_healthy
  condor-postgres:
    environment:
      POSTGRES_DB: mediq
      POSTGRES_USER: mediq
      POSTGRES_PASSWORD: mediq
    image: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U mediq -d mediq" ]
      interval: 10s
      timeout: 5s
      retries: 5
  condor:
    environment:
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_URL=jdbc:postgresql://condor-postgres:5432/mediq
      - SPRING_DATASOURCE_USERNAME=mediq
      - SPRING_DATASOURCE_PASSWORD=mediq
    ports:
      - 8080:8081
    build:
      context: .
      dockerfile: condor.Dockerfile
